#+TITLE: note on concurrent
#+AUTHOR: XIE Yuheng
#+EMAIL: xyheme@gmail.com

* 記
  1. inner 解釋器在對函數體做解釋的時候
     可以利用消息傳遞的等待的語義
     把計算分配到不同的處理器上
     一個問題是 等待消息並處理消息的基本單元是 進程
     進程應該如何來實現 ?
  2. 共享某些內存
     此時需要這些內存中的數據具有某種穩定性
  3. 完全不共享內存
     這是不可能的
     比如 我要實現優有向圖處理語言
     有很多函數分工處理有向圖
     如果每次參數傳遞的時候都複製整個有向圖
     那麼計算的時間就都耗費在複製參數上面了
  4. 這基本上說明了
     如果要求語法的一致性[以進行自動的並行化]
     那麼 實現策略 必須是
     在底層實現算法來處理各種情況
  5. 我應該把並行計算的東西放在之後再設計
     因爲 不論是就 有向圖處理 還是就 並行計算 而言
     我的經驗都太少了
* 模型
  1. 設每個函數都是一個獨立的機器 ???
     優自己的堆 ??
* 並行計算
  1. 進程 的特點是 它有自己的棧和堆
     設計上優兩種
     1) 所有的函數都是進程
        所要達到的效果是
        使得一個類似數據分配器的計算分配器
        能夠得以實現
        以在多核時不必讓程序員去管理計算的分配
        這樣就破壞了用棧做參數傳遞的傳統
     2) 進程是函數的集合
  2. 計算分配器 需要完成的任務是什麼 ?
     它像是一個信使
     首先
     可能不是爲了
     把計算任務分配給地球另一邊的一個計算機
     然後在計算之後再收回結算結構
     [儘管這樣是可能的]
     計算分配器 的主要使用場合是
     多核的電腦
     整個電腦整個還被看成是一個整體
     計算分配器 需要把整個電腦的很多處理器的算能力分配出來
     計算分配器 本身也必須佔用一個處理器
     以進行調度工作
     [可能不需要這樣 而去實現完全地對稱]
  3. 它必須能夠部分地模擬串行計算的效果
  4. 那麼
     計算分配器 維護一個列表
     它不停的掃描整個列表
     ><
  5. 把消息傳遞出去之後
     可以等待 被傳遞處的返回
     也可以不等
* pi-calculus
  點之間有一條邊相連時
  它們之間就可以用這條來傳遞信息
  ><><>< 在digrap中如何理解這一點
  ---------------------------------------
  lambda-cal可以被看成是
  在用一種形式語言來描述某種類型的有向圖
  pi-cal更明顯地也可以看成是如此
  ---------------------------------------
  input port & output port
  of the so called agent
  ---------------------------------------
  比如考慮對一個lambda-term的reduce
  顯然我可以把reduction的不同部分的工作分配給不同的cpu
  然後當全算玩之後把結果返回給我
  好讓我作最後的處理以返回最終結果
  ---------------------------------------
  output & input actions
  ---------------------------------------
  有很多的``functional-computer''
  必須能以明顯地控制參數在它們之間的傳遞方式
  讓機器a計算F這個函數
  讓它從機器b和機器c那裏拿參數
  讓它把返回值返回到機器d
  在這個過程中
  機器bc對兩個參數的計算可以是同時進行的
  而機器a必須等待兩個參數都到齊
  參數的傳遞是通過輸入輸出設備來完成的
  ---------------------------------------
  每個機器都有一個獨立的棧
  一個機器可以用自己的棧進行計算
  也可以pop和push 各種port棧
  必須處理``等待''的問題
  即``算好了''這條信息的傳遞的問題
