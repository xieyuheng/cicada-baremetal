(* need UTF-8 support in the following function *)
(* 即 通过改变 string->char 这个函数 就能扩展 所能够处理的 char *)
: string->char
  (* string[address, length] -- char *)
  (* drop fetch-byte *)
  get-char
  xx|swap|x drop2
  Exit
; define-verb


: char
  (* word-string[address, length] -- word-string[address, length] *)
  (* compile::
       _literal[address of explainer], char *)
  literal _literal compile-number-to-here
  tail-and-head-of-word-string
  string->char compile-number-to-here
  Exit
; define-key-word
ok
: write-dec-number-char (* byte -- *)
  char 0  + write-byte
  Exit
; define-verb

: help:write-dec-number,push-chars
  (* ... , number of small DecNumbers, fixnum --
     ... , number of small DecNumbers *)
  10 moddiv
  dup zero? if
    drop swap add1 Exit
  then
  xx|swap|x xx|swap|x add1 swap
  help:write-dec-number,push-chars
  Exit
; define-verb

: help:write-dec-number,write-bytes
  (* ... , number of small DecNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-dec-number-char
  help:write-dec-number,write-bytes
  Exit
; define-verb


: write-dec-number,unsign (* fixnum -- *)
  0 swap
  help:write-dec-number,push-chars
  help:write-dec-number,write-bytes
  Exit
; define-verb

: write-dec-number,sign (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-dec-number,unsign
  Exit
; define-verb

: write-dec-number
  write-dec-number,sign
  Exit
; define-verb
: write-bin-number-char (* byte -- *)
  char 0  + write-byte
  Exit
; define-verb

: help:write-bin-number,push-chars
  (* ... , number of small BinNumbers, fixnum --
     ... , number of small BinNumbers *)
  2 moddiv
  dup zero? if
    drop swap add1 Exit
  then
  xx|swap|x xx|swap|x add1 swap
  help:write-bin-number,push-chars
  Exit
; define-verb

: help:write-bin-number,write-bytes
  (* ... , number of small BinNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-bin-number-char
  help:write-bin-number,write-bytes
  Exit
; define-verb

: write-bin-number,unsign (* fixnum -- *)
  0 swap
  help:write-bin-number,push-chars
  help:write-bin-number,write-bytes
  Exit
; define-verb

: write-bin-number,sign (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-bin-number,unsign
  Exit
; define-verb

: write-bin-number
  write-bin-number,sign
  Exit
; define-verb
: write-oct-number-char (* byte -- *)
  char 0  + write-byte
  Exit
; define-verb

: help:write-oct-number,push-chars
  (* ... , number of small OctNumbers, fixnum --
     ... , number of small OctNumbers *)
  8 moddiv
  dup zero? if
    drop swap add1 Exit
  then
  xx|swap|x xx|swap|x add1 swap
  help:write-oct-number,push-chars
  Exit
; define-verb

: help:write-oct-number,write-bytes
  (* ... , number of small OctNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-oct-number-char
  help:write-oct-number,write-bytes
  Exit
; define-verb

: write-oct-number,unsign (* fixnum -- *)
  0 swap
  help:write-oct-number,push-chars
  help:write-oct-number,write-bytes
  Exit
; define-verb

: write-oct-number,sign (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-oct-number,unsign
  Exit
; define-verb

: write-oct-number
  write-oct-number,sign
  Exit
; define-verb
: write-hex-number-char (* byte -- *)
  dup 10 < if
    char 0  + write-byte Exit
  then
  10 -
  char a  + write-byte
  Exit
; define-verb

: write-hex-number-char,capital (* byte -- *)
  dup 10 < if
    char 0  + write-byte Exit
  then
  10 -
  char A  + write-byte
  Exit
; define-verb

: help:write-hex-number,push-chars
  (* ... , number of small HexNumbers, fixnum --
     ... , number of small HexNumbers *)
  16 moddiv
  dup zero? if
    drop swap add1 Exit
  then
  xx|swap|x xx|swap|x add1 swap
  help:write-hex-number,push-chars
  Exit
; define-verb

: help:write-hex-number,write-bytes
  (* ... , number of small HexNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-hex-number-char
  help:write-hex-number,write-bytes
  Exit
; define-verb

: help:write-hex-number,write-bytes,capital
  (* ... , number of small HexNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-hex-number-char,capital
  help:write-hex-number,write-bytes,capital
  Exit
; define-verb

: write-hex-number,unsign (* fixnum -- *)
  0 swap
  help:write-hex-number,push-chars
  help:write-hex-number,write-bytes
  Exit
; define-verb

: write-hex-number,capital (* fixnum -- *)
  0 swap
  help:write-hex-number,push-chars
  help:write-hex-number,write-bytes,capital
  Exit
; define-verb

: write-hex-number,sign (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-hex-number,unsign
  Exit
; define-verb

: write-hex-number,sign,capital (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-hex-number,capital
  Exit
; define-verb

: write-hex-number
  write-hex-number,sign
  Exit
; define-verb
: write-aph-number-char (* byte -- *)
  dup 10 < if
    char 0  + write-byte Exit
  then
  10 -
  char a  + write-byte
  Exit
; define-verb

: write-aph-number-char,capital (* byte -- *)
  dup 10 < if
    char 0  + write-byte Exit
  then
  10 -
  char A  + write-byte
  Exit
; define-verb

: help:write-aph-number,push-chars
  (* ... , number of small AphNumbers, fixnum --
     ... , number of small AphNumbers *)
  36 moddiv
  dup zero? if
    drop swap add1 Exit
  then
  xx|swap|x xx|swap|x add1 swap
  help:write-aph-number,push-chars
  Exit
; define-verb

: help:write-aph-number,write-bytes
  (* ... , number of small AphNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-aph-number-char
  help:write-aph-number,write-bytes
  Exit
; define-verb

: help:write-aph-number,write-bytes,capital
  (* ... , number of small AphNumbers -- *)
  dup zero? if drop Exit
  then
  sub1 swap write-aph-number-char,capital
  help:write-aph-number,write-bytes,capital
  Exit
; define-verb

: write-aph-number,unsign (* fixnum -- *)
  0 swap
  help:write-aph-number,push-chars
  help:write-aph-number,write-bytes
  Exit
; define-verb

: write-aph-number,capital (* fixnum -- *)
  0 swap
  help:write-aph-number,push-chars
  help:write-aph-number,write-bytes,capital
  Exit
; define-verb

: write-aph-number,sign (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-aph-number,unsign
  Exit
; define-verb

: write-aph-number,sign,capital (* fixnum -- *)
  dup 0 < if
    char -  write-byte
    negate
  then
  write-aph-number,capital
  Exit
; define-verb

: write-aph-number
  write-aph-number,sign
  Exit
; define-verb
: .unsign (* fixnum -- *)
  write-dec-number
  32 write-byte
  Exit
; define-verb

: .sign (* fixnum -- *)
  write-dec-number,sign
  32 write-byte
  Exit
; define-verb


: . .sign Exit ; define-verb


: .bin (* fixnum -- *)
  write-bin-number
  32 write-byte
  Exit
; define-verb

: .bin,sign (* fixnum -- *)
  write-bin-number,sign
  32 write-byte
  Exit
; define-verb

: .oct (* fixnum -- *)
  write-oct-number
  32 write-byte
  Exit
; define-verb

: .oct,sign (* fixnum -- *)
  write-oct-number,sign
  32 write-byte
  Exit
; define-verb

: .hex (* fixnum -- *)
  write-hex-number
  32 write-byte
  Exit
; define-verb

: .hex,sign (* fixnum -- *)
  write-hex-number,sign
  32 write-byte
  Exit
; define-verb

: .hex,capital (* fixnum -- *)
  write-hex-number,capital
  32 write-byte
  Exit
; define-verb

: .hex,sign,capital (* fixnum -- *)
  write-hex-number,sign,capital
  32 write-byte
  Exit
; define-verb


: .aph (* fixnum -- *)
  write-aph-number
  32 write-byte
  Exit
; define-verb

: .aph,sign (* fixnum -- *)
  write-aph-number,sign
  32 write-byte
  Exit
; define-verb

: .aph,capital (* fixnum -- *)
  write-aph-number,capital
  32 write-byte
  Exit
; define-verb

: .aph,sign,capital (* fixnum -- *)
  write-aph-number,sign,capital
  32 write-byte
  Exit
; define-verb

: write-space (* -- *)
  32 write-byte Exit
; define-verb

: write-some-space (* n -- *)
  dup zero? if
    drop Exit
  then
  sub1
  write-space
  write-some-space
  Exit
; define-verb
(* for single line string only *)

: help,:"
  (* word-string[address, length] -- word-string[address, length] *)
  (* Lambda-stack ::
       address to compile the address of string --  *)
  (* compile ::
   *   _literal address
   *   _literal length
   *)
  (* compile to [data section] ::
   *   1 unit  string-header
   *   n byte  string
   *   1 byte  0
   *)
  (* char by char compile *)
  tail-and-head-of-string
  dup char " == if
    drop
    (* compile address to here *)
    literal _literal compile-number-to-here
      pop-lambda-stack dup push-lambda-stack
    compile-number-to-here
    (* compile length to here *)
    literal _literal compile-number-to-here
    Current-data-section
      pop-lambda-stack dup push-lambda-stack
    sub dup
    compile-number-to-here
    (* set the string header *)
    pop-lambda-stack
    Cell-width
    sub save
    (* add a tailling 0 *)
    0 compile-byte-to-data-section
    Exit
  then
  compile-byte-to-data-section
  help,:"
  Exit
; define-verb


: :"
  (* word-string[address, length] -- word-string[address, length] *)
  (* compile ::
   *   _literal address
   *   _literal length
   *)
  (* compile to [data section] ::
   *   1 unit  string-header
   *   n byte  string
   *   1 byte  0
   *)
  Cell-width address Current-data-section add-save (* for string header *)
  Current-data-section push-lambda-stack (* for compile to here *)
  (* drop a whitespace *)
  tail-and-head-of-string
  drop
  help,:"
  Exit
; define-key-word
ok
: string-of-many-dash?
  (* string[address, length] -- True or False *)
  0 push-lambda-stack (* counter *)
  help:string-of-many-dash?
  Exit
; define-verb

: help:string-of-many-dash?
  (* string[address, length] -- True or False *)
  (* Lambda-stack ::
       counter -- *)
  dup zero? if
    drop2
    pop-lambda-stack
    6 >= if True
         else False
         then Exit
  then
  tail-and-head-of-string
  char -  =/= if
    drop2
    pop-lambda-stack drop
    False Exit
  then
  pop-lambda-stack add1 push-lambda-stack
  help:string-of-many-dash?
  Exit
; define-verb
(* for multi line string *)

: string
  (* word-string[address, length] -- word-string[address, length] *)
  (* compile ::
   *  | _literal | address |
   *  | _literal | length  |
   *)
  (* compile to [data section] ::
   *  | 1 unit | string-header |
   *  | n byte | string        |
   *  | 1 byte | 0             |
   *)
  (* leave place for string header *)
     Cell-width address Current-data-section add-save
  (* for copy to data-section *)
     help:string,find-cr
     over push-lambda-stack
  help:string
  Exit
; define-key-word
ok

: help:string,find-cr
  (* word-string[address, length] -- word-string[address, length] *)
  tail-and-head-of-string
  10 (* cr *) == if
    Exit
  then
  help:string,find-cr
  Exit
; define-verb

: help:string,find-address-of-cr,backward
  (* address -- address *)
  dup fetch-byte 10 (* cr *) == if
    add1
    Exit
  then
  sub1
  help:string,find-address-of-cr,backward
  Exit
; define-verb

: help:string
  (* word-string[address, length] -- word-string[address, length] *)
  (* Lambda-stack ::
       [address of the begin of the source string] --  *)
  (* compile ::
   *   | _literal | address |
   *   | _literal | length  |
   *)
  (* compile to [data section] ::
   *   | 1 unit : string-header |
   *   | n byte : string        |
   *   | 1 byte : 0             |
   *)
  (* find the end and copy *)
  tail-and-head-of-word-string
  dup2 string-of-many-dash? if
    drop
    help:string,find-address-of-cr,backward
    (* copy to data-section *)
    pop-lambda-stack tuck sub
    (* source, length *)
    Current-data-section dup push-lambda-stack
    swap dup push-lambda-stack (* length *)
    copy-byte-string
    (* update Current-data-section *)
    pop-lambda-stack dup push-lambda-stack
    address Current-data-section add-save
    (* and add a tailing 0 *)
    0 compile-byte-to-data-section
    (* set the string header in data-section *)
    pop-lambda-stack
    pop-lambda-stack dup push-lambda-stack
    Cell-width sub save
    (* compile address to here *)
    literal _literal compile-number-to-here
      pop-lambda-stack dup push-lambda-stack
    compile-number-to-here
    (* compile length to here *)
    literal _literal compile-number-to-here
      pop-lambda-stack
      Cell-width sub fetch
    compile-number-to-here
    Exit
  then
  drop2
  help:string
  Exit
; define-verb
ok
