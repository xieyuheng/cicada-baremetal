#+TITLE: 蟬語之漢語核
#+AUTHOR: XIE Yuheng
#+EMAIL: xyheme@gmail.com


* ==================================================
* TODO
  1. 中文的命名規則還有待設計
     現在的命名規則讀起來不是很方便
* ==================================================
* 筆記
** 十誡
   1. 任何戒律在需要的時候都可以被打破
      但是你一定要明白爲什需要打破這些戒律
      並且在打破舊的戒律的同時
      你要探尋新的規則
      不是要用這些規則限制自己
      而是要在觀察中總結規律
      以形成更好的認識
   2. 每個函數的參數個數不應該很多
      多於三個的時候就要仔細檢查必要性了
   3. 寫一個大函數的時候發現需要把它分解成小函數
      然後你就去寫那些小函數
      重要的是每寫完一個小函數的時候
      如果這個函數的正確性不是顯然的
      那麼就馬上去測試這個小函數的正確性
      因爲當回到大函數的時候 就很難發現是那裏錯誤了
      + 其實不難發現是哪裏錯了
        當理解了 蟬語 的工作方式之後
        如果一段函數的執行出錯了
        找到真正出錯的那個函數的過程非常容易
   4. 上面這個是非常重要的一誡
      我的感受是
      在沒有類型系統的條件下
      當運行的時候出現了一個錯誤
      通常在十分鐘之內就能找到引起錯誤的函數
      這一誡的有趣之處在於 我幾乎不可能去遵守這條戒律
      在寫下一個函數的時候
      我總是想單純地通過看着這個函數就相信這個函數是正確的
      要想忽視這條戒律
      那麼你就必須找出很好的設計函數接口的方式
      並且找出一組 好的 用來描述你想要解決的問題的 詞
      也許忽視這條戒律 並且 摒棄類型推導系統
      就能鞭策你作出更簡潔設計
   5. 如果要使用計數器
      那麼等被計數的那件事幹完了之後再增加或減少計數器
      而不要先更改計數器再去做計數器所計數的工作
   6. 每次更改含有 "轉" 的函數的時候
      要記得更新 "轉" 後面的 "位移"
   7. 小心地檢查 在某個新寫完的函數執行之後
      棧中 有沒有 多出 或 減少 值
      在一次計算之後 棧中所保存的應該只是我所需要的返回值
      + 在集成開發環境 的幫助下 這一點將很容易檢查
   8. 縮進風格是任意的
      只要你能合理地利用縮進來增加代碼的可讀性
* ==================================================
* 記
  1. 要求是 中文核 不依賴於 英文核
  2. 這一小節中
     直接從英文翻譯而來的
     都是一些 需要定義在彙編中的基本詞彙
     需要的時候很容易把它們重新定義到彙編中
  3. 有些 重要的全局變量 不能有兩個版本
     因此 保持這些 英文的 名詞
     這是可以接受的
     畢竟 我不是一個想要把所有東西都漢化的
     狹隘的 民族主義者
     這種詞包括 :
     1) Here
     2) First-word-in-dictionary
     3) Lambda-stack-pointer
     4) Current-data-section
* 名詞
** 重要的名詞
   #+begin_src cicada :tangle chinese-core.cicada
   (* Here 這個名詞 還是必須使用英文版本的 *)
   夫 單元大小 Cell-width 者 也
   #+end_src
** 真 假
   #+begin_src cicada :tangle chinese-core.cicada
   夫 假 False 者 也
   夫 真 True  者 也
   #+end_src
** 詮釋者
   #+begin_src cicada :tangle chinese-core.cicada
   夫 動詞詮釋者 Verb-explainer 者 也
   夫 名詞詮釋者 Noun-explainer 者 也
   #+end_src
* 動詞
** 記 定長整數
   1. "取反加一"
      是 定長整數 的集合上的方冪爲零的變換
      這個變換以自身爲逆變換 因而是 雙射
      並且它是 [定長整數, +] 上面的同構變換
   2. 而要知道 [自然數, +] 上的同構變換只有乘法
      而上面的 "取反加一" 作爲乘法就是乘以負一
   3. 但是其實不是的
      因爲 [定長整數, +] 並不是一個代數結構
      但是它已經很接近一個代數結構了
      只有當 CUP 的 overflow 旗子被舉起來的時候
      這種近似才出現了錯誤
      + 而利用舉起旗子所傳達出來的信息我們可以探測到並且更正這種錯誤
      因此 "取反加一" 是 類 [自然數, +] 集合上的同構變換
      這個變換的語義是 "乘以負一"
** 定長整數
   #+begin_src cicada :tangle chinese-core.cicada
   夫 加       add      已矣 者 動詞也
   夫 減       sub      已矣 者 動詞也
   夫 乘       mul      已矣 者 動詞也
   夫 除       div      已矣 者 動詞也
   夫 模       mod      已矣 者 動詞也
   夫 除模     divmod   已矣 者 動詞也
   夫 模除     moddiv   已矣 者 動詞也
   夫 負       negate   已矣 者 動詞也
   夫 冪       power    已矣 者 動詞也
   #+end_src
** 存儲空間
   #+begin_src cicada :tangle chinese-core.cicada
   (* 一般的 存取 所作用於 的是 一單元 大小 的存儲空間
    * 小的 存取 所作用於 的是 一八位組 大小 的存儲空間
    *)

   (* 多個值 而 存取 的作用 如下
    *   在存儲空間中 :
    *     ||  1 : 值-1  ||
    *     ||  1 : 值-2  ||
    *     ||  1 : 值-3  ||
    *     ...
    *   在棧中 :
    *     (* 值-1, 值-2, 值-3, ... *)
    * 即 從上到下 對應 從左到右
    * 這樣就和 名詞 的結構保持了一致
    * 此時 取 很簡單 但是 存 需要特殊處理
    *)

   夫 存         save              已矣 者 動詞也
   夫 小存       save-byte         已矣 者 動詞也
   夫 而存       n-save            已矣 者 動詞也
   夫 而小存     n-save-byte       已矣 者 動詞也


   夫 取         fetch             已矣 者 動詞也
   夫 小取       fetch-byte        已矣 者 動詞也
   夫 而取       n-fetch           已矣 者 動詞也
   夫 而小取     n-fetch-byte      已矣 者 動詞也


   夫 加存       add-save          已矣 者 動詞也
   夫 減存       sub-save          已矣 者 動詞也

   夫 複製八位組串 copy-byte-string  已矣 者 動詞也
   #+end_src
** 測試
   #+begin_src cicada
   夫 k 1 2 3 者 也



   k . . . (* 3 2 1 *) 回車
   7 8 9 址 k 3 而存

   k . . . (* 7 8 9 *) 回車

   址 k 3 而取  . . . (* 7 8 9 *) 回車

   ok
   #+end_src
** 參數棧
*** 指針
    #+begin_src cicada :tangle chinese-core.cicada
    夫 做自引用值於參數棧
       make-self-reference-value,in-argument-stack
       已矣
    者 動詞也

    夫 取參數棧指針
       fetch-argument-stack-pointer
       已矣
    者 動詞也

    夫 重置參數棧指針
       reset-argument-stack-pointer
       已矣
    者 動詞也
    #+end_src
*** 記
    1. 這其實是 一個有趣的結合代數
       任取一個 有限階置換羣
       都存在 這個有趣的結合代數的子代數 與 所取的有限階置換羣 同構
       下面的某些棧處理函數就是某些低階的有限置換羣中的元素
*** 棄
    #+begin_src cicada :tangle chinese-core.cicada
    夫 棄     drop      已矣 者 動詞也
    夫 而棄   n-drop    已矣 者 動詞也
    #+end_src
*** 復
    #+begin_src cicada :tangle chinese-core.cicada
    夫 復     dup       已矣 者 動詞也
    夫 而復   n-dup     已矣 者 動詞也
    #+end_src
*** 躍
    #+begin_src cicada :tangle chinese-core.cicada
    夫 躍       over       已矣 者 動詞也
    夫 而躍     x-y-over   已矣 者 動詞也
    #+end_src
*** 藏
    #+begin_src cicada :tangle chinese-core.cicada
    夫 藏       tuck       已矣 者 動詞也
    夫 而藏     x-y-tuck   已矣 者 動詞也
    #+end_src
*** 換
    #+begin_src cicada :tangle chinese-core.cicada
    夫 換       swap       已矣 者 動詞也
    夫 而換     x-y-swap   已矣 者 動詞也
    #+end_src
** 木答棧
*** 棧之功能
    1. 爲函數的複合 來傳遞參數
    2. 記函數調用結束後 將要返回的位置
    3. 臨時的保存某些值
       讓這些值必要干擾參數的傳遞
    4. 這其中的第三個功能
       可以 用爲了第一個功能而準備的棧來
       但是 這樣不方便
       所以這裏給出 Lambda-stack
       來以更直觀地方式 實現第三個功能
*** 實現
    #+begin_src cicada :tangle chinese-core.cicada
    (* 入棧時 棧的指針 向低地址移動 *)
    夫 入木答棧
       (* 參數棧:: 值 --> 木答棧:: 值 *)
       單元大小 址 Lambda-stack-pointer 減存
       Lambda-stack-pointer 存
       已矣
    者 動詞也

    夫 出木答棧
       (* 木答棧:: 值 --> 參數棧:: 值 *)
       Lambda-stack-pointer 取
       單元大小 址 Lambda-stack-pointer 加存
       已矣
    者 動詞也


    夫 準備
       (* 參數棧:: a, b --> 木答棧:: a, b *)
       (* 注意 參數的順序 *)
       換 入木答棧 入木答棧
       已矣
    者 動詞也

    夫 召回
       (* 木答棧:: a, b --> 參數棧:: a, b *)
       (* 注意 參數的順序 *)
       出木答棧 出木答棧 換
       已矣
    者 動詞也
    #+end_src
** 謂詞
*** 關於 真 假
    #+begin_src cicada :tangle chinese-core.cicada
    夫 真乎       true?   已矣 者 動詞也
    夫 假乎       false?  已矣 者 動詞也
    #+end_src
*** 關於 定長整數
    #+begin_src cicada :tangle chinese-core.cicada
    夫 相等       ==       已矣 者 動詞也
    夫 不等       =/=      已矣 者 動詞也

    夫 小於       <        已矣 者 動詞也
    夫 不大於     <=       已矣 者 動詞也

    夫 大於       >        已矣 者 動詞也
    夫 不小於     >=       已矣 者 動詞也

    夫 零乎       zero?    已矣 者 動詞也
    夫 一乎       one?     已矣 者 動詞也
    #+end_src
** 位運算
*** 邏輯
    #+begin_src cicada :tangle chinese-core.cicada
    (* 默認 位 指 二進制數的一位 *)
    夫 位與    bitwise-and       已矣 者 動詞也
    夫 位或    bitwise-or        已矣 者 動詞也
    夫 位異或  bitwise-xor       已矣 者 動詞也
    夫 位反    bitwise-invert    已矣 者 動詞也
    #+end_src
*** 位移
    #+begin_src cicada :tangle chinese-core.cicada
    夫 左移    shift-left        已矣 者 動詞也
    夫 右移    shift-right       已矣 者 動詞也

    夫 右移並保持符號
       shift-right-preserve-sign
       已矣
    者 動詞也
    #+end_src
** 輸入 與 輸出
   #+begin_src cicada :tangle chinese-core.cicada
   夫 讀八位組 read-byte  已矣 者 動詞也
   夫 寫八位組 write-byte 已矣 者 動詞也
   #+end_src
** 八位組串
   #+begin_src cicada :tangle chinese-core.cicada
   夫 八位組串相等      equal-string?            已矣 者 動詞也
   夫 八位組串之首      head-of-string           已矣 者 動詞也
   夫 八位組串之尾      tail-of-string           已矣 者 動詞也
   夫 八位組串之尾與首  tail-and-head-of-string  已矣 者 動詞也


   夫 八位組串全爲空白乎
      (* 八位組串[地址, 長度] -- 真 或 假 *)
      復 零乎 則
         2 而棄 真 已矣
      再 八位組串之尾與首
      32 (* ASCII-space *)
      <= 則
         八位組串全爲空白乎 已矣
      再 2 而棄  假 已矣
   者 動詞也

   夫 寫八位組串
      (* 八位組串[地址, 長度] -- *)
      復 零乎 則
         2 而棄 已矣
      再
      1 減 換
      復 小取 寫八位組
      1 加 換
      寫八位組串
      已矣
   者 動詞也
   #+end_src
* 字
** 首位編碼->編碼長度
   #+begin_src cicada :tangle chinese-core.cicada
   夫 首位編碼->編碼長度
      (* UTF-8 char -- length or 0 *)
      char-header->char-length
      已矣
   者 動詞也
   #+end_src
** 字串之尾與首
   #+begin_src cicada :tangle chinese-core.cicada
   夫 緩衝區,字串之尾與首 0 者 也


   (* >< 下面的函數沒有做錯誤處理 *)
   夫 字串之尾與首
      (* 八位組串[地址, 長度] --
         八位組串[地址, 長度], UTF-8 字符 *)

      (* 清空 字之緩衝區 *)
      0 址 緩衝區,字串之尾與首 存

      躍 小取 首位編碼->編碼長度
      復 入木答棧
      1 2 而躍  址 緩衝區,字串之尾與首
      1 2 而換  複製八位組串

      緩衝區,字串之尾與首
      出木答棧 換 入木答棧
        藏 減
        2 1 而換  加
        換
      出木答棧
      已矣
   者 動詞也
   #+end_src
** 寫字
   #+begin_src cicada :tangle chinese-core.cicada
   夫 緩衝區,寫字 0 者 也

   夫 寫字
      (* UTF-8 字符 -- *)
      復 址 緩衝區,寫字 存
      首位編碼->編碼長度
      址 緩衝區,寫字
      換 寫八位組串
      已矣
   者 動詞也
   #+end_src
* 八位組串->整數,與誤
** 記
   1. >< 這裏 我偷懶了
      只是簡單的映射過來而已
** 八位組串代表整數乎
   #+begin_src cicada :tangle chinese-core.cicada
   夫 八位組串代表整數乎
      (* 八位組串[地址, 長度] -- 真 或 假 *)
      string-denote-integer?
      已矣
   者 動詞也
   #+end_src
** 八位組串->整數,與誤
   #+begin_src cicada :tangle chinese-core.cicada
   夫 八位組串->整數,與誤
      (* 八位組串[地址, 長度] -- 整數, 真 *)
      (* 或 *)
      (* 八位組串[地址, 長度] -- 0, 假 *)
      string->integer,with-error
      已矣
   者 動詞也
   #+end_src
* 八位組串 雜項
** 換行 與 回車
   #+begin_src cicada :tangle chinese-core.cicada
   夫 換行
      (* -- *)
      10 (* ASCII-space *)
      寫八位組
      已矣
   者 動詞也

   夫 回車
      (* -- *)
      10 (* ASCII-space *)
      寫八位組
      已矣
   者 動詞也
   #+end_src
* 符號散列表
** 相關常量
   #+begin_src cicada :tangle chinese-core.cicada
   夫 符號項之個數           Number-of-symbol-entrys    者 也
   夫 符號項值域之大小       Symbol-value-bytes-size    者 也
   夫 符號項八位組串域之大小   Symbol-string-bytes-size   者 也
   夫 符號項長度域之大小     Symbol-length-bytes-size   者 也
   夫 符號項之大小           Symbol-entry-bytes-size    者 也
   夫 符號項八位組串域之最大值 Symbol-max-length          者 也

   夫 首個符號項         First-symbol-entry         者 也
   夫 末個符號項         Last-symbol-entry          者 也
   #+end_src
** 索引-逆散->八位組串 八位組串-散->索引
   #+begin_src cicada :tangle chinese-core.cicada
   (*
    * 符號項 :
    * | 值域     |
    * | 八位組串域 |
    * | 長度域   |
    *)

   夫 索引->地址
      (* 索引 -- 地址 *)
      符號項之大小 乘
      首個符號項 加
      已矣
   者 動詞也

   夫 索引-逆散->八位組串
      (* 索引 -- 八位組串[地址, 長度] *)
      索引->地址 單元大小 加
      復  1 加  換
      小取
      已矣
   者 動詞也


   夫 助,八位組串-散->索引,求和
      (* 和 , 八位組串[地址, 長度] -- 和 *)
      復 零乎 則
         2 而棄  已矣
      再 八位組串之尾與首
      躍 左移
      1 3 而換  加  2 1 而換
      助,八位組串-散->索引,求和
      已矣
   者 動詞也


   夫 助,八位組串-散->索引,找舊或作新
      (* 八位組串[地址, 長度], 索引 -- 索引 *)
      2 1 而藏
      索引-逆散->八位組串
      (* 索引, 八位組串[地址, 長度], 八位組串-2[地址, 長度] *)
      復 零乎 則
         (* 作新 *)
         棄 躍 躍
         1 減  小存
         換
         複製八位組串
         已矣
      再
      (* 索引, 八位組串[地址, 長度], 八位組串-2[地址, 長度] *)
      2 2 而躍 八位組串相等 則 (* 找舊 *)
        2 而棄 已矣
      再
      1 2 而換  (* 以得 下一個 索引 *)
      (* 八位組串[地址, 長度], 索引 *)
      復 索引->地址 末個符號項 相等 則
         棄
         0
         助,八位組串-散->索引,找舊或作新
         已矣
      再
      1 加
      助,八位組串-散->索引,找舊或作新
      已矣
   者 動詞也


   夫 助,八位組串-散->索引,和->索引
      (* 和 -- 索引 *)
      符號項之個數 模
      已矣
   者 動詞也


   夫 八位組串-散->索引
      (* 八位組串[地址, 長度] -- 索引 *)
      2 而復
        復 符號項八位組串域之最大值 > 則
           棄 符號項八位組串域之最大值
           (*
            * 這意味着
            * 只有 前面的 符號項八位組串域之最大值 個八位組
            * 被 散列函數使用到了
            *)
        再  0  2 1 而換
        助,八位組串-散->索引,求和
        助,八位組串-散->索引,和->索引
      助,八位組串-散->索引,找舊或作新
      已矣
   者 動詞也
   #+end_src
* 編撰 於 數據段
  #+begin_src cicada :tangle chinese-core.cicada
  夫 編撰數於數據段
     (* 數 -- *)
     (* 編撰 於 數據段 ::
          數 *)
     Current-data-section
     存
     Current-data-section
     單元大小 加
     址 Current-data-section 存
     已矣
  者 動詞也

  夫 編撰八位組於數據段
     (* 八位組 -- *)
     (* 編撰 於 數據段 ::
          數 *)
     Current-data-section
     小存
     1 址 Current-data-section 加存
     已矣
  者 動詞也

  (*
   ,* 注意
   ,* 八位組串在 內存中的樣子是:
   ,* | 1 單元 | 長度   |
   ,* | n 八位組 | 八位組串 |
   ,* | 1 八位組 | 0      |
   ,*)

  夫 編撰八位組串於數據段
     (* 八位組串[地址, 長度] -- *)
     (* 編撰 於 數據段 ::
      ,* | 1 單元 | 長度   |
      ,* | n 八位組 | 八位組串 |
      ,* | 1 八位組 | 0      |
      ,*)
     復 入木答棧 (* 爲更新 Current-data-section *)
       復 編撰數於數據段
       Current-data-section
       換 複製八位組串
     (* 更新 Current-data-section *)
     出木答棧
     Current-data-section 加
     0 躍 小存
     1 加
     址 Current-data-section 存
     已矣
  者 動詞也

  夫 編撰純八位組串於數據段
     (* 八位組串[地址, 長度] -- *)
     (* 編撰 於 數據段 ::
      ,* | n 八位組 | 八位組串 |
      ,*)
     復 入木答棧 (* 爲更新 Current-data-section *)
       Current-data-section
       換 複製八位組串
     (* 更新 Current-data-section *)
     出木答棧
     址 Current-data-section 加存
     已矣
  者 動詞也
  #+end_src
* 詞典 與 詞典編撰者
** 記
   1. 詞典的編撰
      是由很多的 詞典編撰者 分工完成的
      一個 詞典的編撰者 在編撰詞典的時候
      會用一些 詞 來定義 一個新的 詞
      並且給這個新的 詞 指定一個 詮釋者
      這樣的描述過程和對詮釋者的指定過程
      就是定義一個 新詞 的過程
      而當查詞典的時候
      這個詞的詮釋者
      會爲查詞典的人 來詮釋 詞典編撰者 對這個詞的定義
   2. 這一節重新定義了 中文的詞典編撰者
      1) 作爲 對系統的測試
      2) 爲將來的編譯做準備
** 執行
   #+begin_src cicada :tangle chinese-core.cicada
   夫 執行       execute     已矣 者 動詞也
   #+end_src
** 記 詞之結構
   單位是 "單元大小"
   | 1 | 名字頭       |
   | m | 名字         |
   | 1 | 大小         |
   | 1 | 標識         |
   | 1 | 鏈接         |
   | 1 | 類型         |
   | 1 | 名字頭的地址 |
   | 1 | 詮釋者       |
   | n | 定義         |
   其中
   | 1 | 類型 |
   ==
   | 位63 | ... | 位1 | 位0 |
   位63 is for HiddenWord
   位0,1,2 are for word type
   0 -- function
   1 -- key word
** 詞->詞之域
   #+begin_src cicada :tangle chinese-core.cicada
   夫 詞->大小
      (* 詞的鏈接[地址] -- 大小 *)
      單元大小 -2 乘 加 取
      已矣
   者 動詞也

   夫 詞->大小之地址
      (* 詞的鏈接[地址] -- 大小之地址 *)
      單元大小 -2 乘 加
      已矣
   者 動詞也

   夫 詞->標識
      (* 詞的鏈接[地址] -- 既是值又是地址 *)
      單元大小 -1 乘 加
      已矣
   者 動詞也

   夫 詞->類型
      (* 詞的鏈接[地址] -- 類型 *)
      單元大小 加 取
      已矣
   者 動詞也

   夫 詞->類型之地址
      (* 詞的鏈接[地址] -- 類型之地址 *)
      單元大小 加
      已矣
   者 動詞也

   夫 詞->名字
      (* 詞的鏈接[地址] -- 八位組串[地址, 長度] *)
      單元大小 2 乘 加
      取 復
      單元大小 加 (* 地址 *)
      換 取 (* 長度 *)
      已矣
   者 動詞也

   夫 詞->詮釋者
      (* 詞的鏈接[地址] -- 詮釋者[地址] *)
      單元大小 3 乘 加
      已矣
   者 動詞也

   夫 詞->定義
      (* 詞的鏈接[地址] -- 定義[地址] *)
      單元大小 4 乘 加
      已矣
   者 動詞也
   #+end_src
** 查詞典
*** [未使用] 舊的 使用 單向連接鏈表 查詞典
    #+begin_src cicada
    夫 助,查詞典
       (* 詞串[地址, 長度], 詞之鏈接[地址] --
          詞之鏈接[地址] 或 0 *)
       復 零乎 則
          3 而棄
          0 已矣
       再
       復 入木答棧
       詞->名字  2 2 而躍  八位組串相等 則
          2 而棄
          出木答棧
          已矣
       再
       出木答棧 取
       助,查詞典
       已矣
    者 動詞也

    夫 查詞典
       (* 詞串[地址, 長度] --
          詞之鏈接[地址] 或 0 *)
       First-word-in-dictionary
       助,查詞典
       已矣
    者 動詞也
    #+end_src
*** 新的 使用 符號散列表 查詞典
    #+begin_src cicada :tangle chinese-core.cicada
    夫 查詞典
       (* 詞串[地址, 長度] -- 詞之鏈接[地址] 或 0 *)
       八位組串-散->索引
       索引->地址
       取
       已矣
    者 動詞也
    #+end_src
** 八位組串代表虛詞乎
   #+begin_src cicada :tangle chinese-core.cicada
   夫 八位組串代表虛詞乎
      (* 八位組串[地址, 長度] -- 真 或 假 *)
      查詞典
      復 0 == 則 已矣
      再 詞->類型
      2#111 位與  1 == 則
        真 已矣
      再 假 已矣
   者 動詞也
   #+end_src
** 找詞界
   #+begin_src cicada :tangle chinese-core.cicada
   夫 找詞界之地址,首
      (* [地址, 長度] -- 地址 或 -1 *)
      復 零乎 則
         2 而復
         -1
         已矣
      再
      八位組串之尾與首
      32 (* ASCII space *)
      大於 則
        棄 1 減
        已矣
      再
      找詞界之地址,首
      已矣
   者 動詞也


   (*
    * 下面的函數 對於 長度爲 0 的詞串的處理方式 與上面不同
    * 這使得對 尾 之尋找 總會成功
    * 所以 當 使用尋找到的結果 來做副作用時 要小心
    *)

   夫 助,找詞界之地址,尾
      (* [地址, 長度] -- 地址 或 -1 *)
      復 零乎 則
         棄
         已矣
      再
      八位組串之尾與首
      32 (* ASCII space *)
      <= 則
         棄 1 減
         已矣
      再
      助,找詞界之地址,尾
      已矣
   者 動詞也


   夫 找詞界之地址,尾
      (* [地址, 長度] -- 地址 或 -1 *)
      (*
       * 對第一個做特殊處理 以保證 不在詞內部時 也能有效
       * 所以 要 使用 "助,找詞界之地址,尾" 這個幫助函數
       *)
      復 零乎 則
         棄
         已矣
      再
      八位組串之尾與首
      32 (* ASCII space *)
      <= 則
         (* 不在詞內部時 先進入詞的內部 *)
         2 而復  找詞界之地址,首
         復 -1 == 則
            3 而棄
            -1
            已矣
         再
         (* [地址, 長度], 首部詞界之地址 *)
         (* 利用所找到的地址 計算一個詞的內部的地址 *)
         2 1 而藏
         1 2 而換
         減 減
      再
      (*
       * 第一個非 空白的 八位組 已經被 棄了
       * 現在 要麼 已經在 詞之內了
       * 要麼 就已經在 尾部詞界 了
       *)
      助,找詞界之地址,尾
      已矣
   者 動詞也


   (* 索引起始於 0 *)

   夫 找詞界之索引,首
      (* [地址, 長度] -- 索引 或 -1 *)
      躍 換
      找詞界之地址,首
      復 -1 == 則
         換 棄 (* 把 -1 留下 *)
         已矣
      再
      換 減
      已矣
   者 動詞也

   夫 找詞界之索引,尾
      (* [地址, 長度] -- 索引 或 -1 *)
      躍 換
      找詞界之地址,尾
      復 -1 == 則
         換 棄 (* 把 -1 留下 *)
         已矣
      再
      換 減
      已矣
   者 動詞也
   #+end_src
** 詞串之尾與首
   #+begin_src cicada :tangle chinese-core.cicada
   (* 下面的三個函數 不能作用於 全爲空白 的 八位組串
    * 在使用這些函數之前應該保證參數不是 全爲空白 的 八位組串
    *)

   夫 詞串之首
      (* 詞串[地址, 長度] -- 名[地址, 長度] *)
      2 而復  找詞界之地址,首
      (* 先不做錯誤處理 而假設上面的函數能夠返回正確的地址 *)
      2 1 而換
      找詞界之地址,尾
      躍 減
      已矣
   者 動詞也

   夫 詞串之尾
      (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
      2 而復  找詞界之索引,尾
      (* 先不做錯誤處理 而假設上面的函數能夠返回正確的地址 *)
      藏 減
      2 1 而換
      加 換
      已矣
   者 動詞也


   夫 詞串之尾與首
      (* 詞串[地址, 長度] -- 詞串[地址, 長度], 名[地址, 長度] *)
      2 而復
      詞串之尾
      2 2 而換
      詞串之首
      已矣
   者 動詞也
   #+end_src
** 編撰數於詞典 編撰八位組串於詞典
   #+begin_src cicada :tangle chinese-core.cicada
   夫 編撰數於詞典
      (* 數 -- *)
      (* 編撰 :: 數 *)
      Here 存
      Here 單元大小 加
      址 Here 存
      已矣
   者 動詞也


   (*
    ,* 注意:
    ,* 八位組串在棧中是: [地址, 長度]
    ,* 而在內存中是:
    ,*   | 1 (單元) : 長度 |
    ,*   | n (八位組) : 八位組串 |
    ,*   | 1 (八位組) : 0 |
    ,*)

   夫 編撰八位組串於詞典
      (* 八位組串[地址, 長度] -- *)
      復 入木答棧
         復 編撰數於詞典
         Here 換 複製八位組串
      (* 更新 Here 全局變量 *)
      出木答棧
      Here 加
      0 躍 小存
      1 加
      址 Here 存
      已矣
   者 動詞也
   #+end_src
** 編撰詞之定義於詞典
   #+begin_src cicada :tangle chinese-core.cicada
   夫 助,編撰詞之定義於詞典,數
      (* 八位組串[地址, 長度] -- *)
      (* >< 這裏 沒有就 string-to-integer,with-error 的返回值
       ,* 做錯誤處理 *)
      即 _即 編撰數於詞典
      八位組串->整數,與誤 棄
      編撰數於詞典
      已矣
   者 動詞也

   夫 助,編撰詞之定義於詞典,虛詞
      (* 詞串[地址, 長度], 八位組串[地址, 長度] -- 詞串[地址, 長度] *)
      (* >< 這裏 沒有就 "查詞典" 的返回值
       ,* 做錯誤處理 *)
      查詞典 詞->詮釋者 執行
      已矣
   者 動詞也

   夫 助,編撰詞之定義於詞典,詞
      (* 詞[地址] -- *)
      詞->詮釋者 編撰數於詞典
      已矣
   者 動詞也


   夫 編撰詞之定義於詞典
      (* 詞串[地址, 長度] -- *)
      2 而復  八位組串全爲空白乎 則
        2 而棄
        已矣
      再

      詞串之尾與首

      (* 下面這句是 找錯誤的時候用的 *)
      (* 2 而復 寫八位組串 換行 *)

      2 而復  八位組串代表整數乎 則
        助,編撰詞之定義於詞典,數
        編撰詞之定義於詞典 已矣
      再

      2 而復  八位組串代表虛詞乎 則
        助,編撰詞之定義於詞典,虛詞
        編撰詞之定義於詞典 已矣
      再

      2 而復  查詞典
      復 0 == 假乎 則
         2 1 而換  2 而棄
         助,編撰詞之定義於詞典,詞
         編撰詞之定義於詞典 已矣
      再

      (* 下面的錯誤處理是不好的 今後將予以改進 *)
      棄
      八位組串-散->索引
      添加符號於等待列表
      編撰詞之定義於詞典
      已矣
   者 動詞也
   #+end_src
** 記 遞歸函數
   1. 當在函數定義內引用自身的時候
      總會形成遞歸調用
      如果詞典中已經 有要定義的函數了 也不會去找它
      唯一 使得這種特性變得不理想 的情形是:
      你在重新定義一個詞的時候 需要調用舊的詞本身
      這種情況非常少 並且出現的時候也很容易解決
** 詞典編撰者 之 輔助函數
*** 作詞頭
    #+begin_src cicada :tangle chinese-core.cicada
    夫 作詞頭
       (* 八位組串[地址, 長度] -- 詞[地址] *)
       Here 入木答棧 (* 爲了 名字頭的地址 *)
         編撰八位組串於詞典
         0    編撰數於詞典 (* 詞之大小 *)
         Here 編撰數於詞典 (* 詞之標識 *)
         Here (* 留下 詞之鏈接 作爲 返回值 *)
         0    編撰數於詞典 (* 詞之鏈接 *)
         0    編撰數於詞典 (* 詞之類型 *)
       出木答棧 編撰數於詞典 (* 詞之名字頭的地址 *)
       已矣
    者 動詞也
    #+end_src
*** 添加新詞入詞典
    #+begin_src cicada :tangle chinese-core.cicada
    夫 添加新詞入詞典
       (* 詞[地址] -- *)
       復

       (* 爲新的 符號散列表 *)
       復
       詞->名字 八位組串-散->索引 索引->地址
       存

       (* 爲舊的 單向連接的鏈表 *)
       (* 需要更新 First-word-in-dictionary 使它指向新加入詞典的詞 *)
       復 First-word-in-dictionary
       換 存 址 First-word-in-dictionary 存
       已矣
    者 動詞也
    #+end_src
*** 設置詞之大小
    #+begin_src cicada :tangle chinese-core.cicada
    (*
     * 下面的函數必須 在定義詞的函數的末尾被調用
     * 即 在 編撰詞之定義於詞典 之後
     * 因爲 它把 Here 作爲一個 隱含的參數
     *)

    夫 設置詞之大小
       (* 詞[地址] -- *)
       復 詞->定義
       Here 換 減
       單元大小 除
       換 詞->大小之地址
       存
       已矣
    者 動詞也
    #+end_src
** 爲了編譯語義而定義的函數
   1. 這裏沒有重定義
      只是映射過來而已
   2. 接口其實只是下面兩個函數而已
   #+begin_src cicada :tangle chinese-core.cicada
   夫 添加符號於等待列表
      add-symbol-to-waiting-symbol-list
      已矣
   者 動詞也

   夫 消去符號於等待列表
      sub-symbol-from-waiting-symbol-list
      已矣
   者 動詞也
   #+end_src
** 動詞也
   #+begin_src cicada :tangle chinese-core.cicada
   (* 下面利用 兩個同名的函數來互相重新定義對方 *)

   夫 函數也
      (* 詞串[地址, 長度] -- *)
      詞串之尾與首
      作詞頭
      復 入木答棧
         添加新詞入詞典
         動詞詮釋者 編撰數於詞典
         編撰詞之定義於詞典
      出木答棧
      復 設置詞之大小
      詞->名字 八位組串-散->索引
      消去符號於等待列表
      已矣
   者 動詞也


   夫 動詞也
      (* 詞串[地址, 長度] -- *)
      詞串之尾與首
      作詞頭
      復 入木答棧
         添加新詞入詞典
         動詞詮釋者 編撰數於詞典
         編撰詞之定義於詞典
      出木答棧
      復 設置詞之大小
      詞->名字 八位組串-散->索引
      消去符號於等待列表
      已矣
   者 函數也
   #+end_src
** >< 也 [未重定義]
** 虛詞也
   #+begin_src cicada :tangle chinese-core.cicada
   夫 虛詞也
      (* 詞串[地址, 長度] -- *)
      詞串之尾與首
      作詞頭
      復 入木答棧
         添加新詞入詞典
         動詞詮釋者 編撰數於詞典
         編撰詞之定義於詞典
      出木答棧
      復 設置詞之大小
      詞->類型之地址
      1 換 小存
      已矣
   者 動詞也
   #+end_src
* --------------------------------------------------
* *測試*
  #+begin_src cicada-language
  夫 階乘 (* n -- n! *)
     復 一乎 則
        已矣
     再
     復 1 減 階乘 乘
     已矣
  者 動詞也

  1 階乘 .
  2 階乘 .
  3 階乘 .
  ok
  #+end_src
* 字
  #+begin_src cicada :tangle chinese-core.cicada
  (*
   * 用 UTF-8 編碼來處理漢字
   * 當 發現八位組串所包含的不是單一的 UTF-8 字時
   * 需要 特殊處理或報錯
   * 這裏 先不做這些處理 而只取第一個 UTF-8 字
   *)

  (* 字者 於機器而言 即 字之編碼 *)
  夫 八位組串->字
     (* 八位組串[地址, 長度] -- 字之編碼 *)
     字串之尾與首
     2 1 而換
     2 而棄
     已矣
  者 動詞也


  夫 字
     (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
     (* 編撰 ::
          _即[詮釋者之地址], 字之編碼 *)
     即 _即 編撰數於詞典
     詞串之尾與首
     八位組串->字 編撰數於詞典
     已矣
  者 虛詞也
  ok
  #+end_src
* *測試*
  #+begin_src cicada-language
  夫 .12 (* 1 2 -- *)
     2 ==
     則
       字 二 寫字
       1 ==
       則      字 一 寫字
       否則    字 空 寫字
       再
     否則
       字 空 寫字
       1 ==
       則      字 一 寫字
       否則    字 空 寫字
       再
     再
     已矣
  者 動詞也


  1 2 .12 換行
  6 2 .12 換行
  1 6 .12 換行
  6 6 .12 換行
  ok
  #+end_src
* 八位組串
** 記
   1. 我不去實現 像 "cica" 一樣的 簡單的 傳統的 字符串的語法
      我試着去實現它了
      但 我發現 它有背於 類 Forth 語言的基本而性質 太遠了
** [未使用] :"
   注意這個詞在英文核中也有定義
   #+begin_src cicada
   (*
    ,* 閱讀單行 字符串 時
    ,* 使用 下面的函數
    ,*)

   夫 助,:"
      (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
      (* 編撰 ::
           八位組串[地址, 長度] *)
      (* 編撰 於 數據段 ::
           八位組串頭 和 以 0 結尾的 八位組串 *)
      八位組串之尾與首
      復 字 " == 則
         棄
         (* 編撰 地址 於詞典 *)
         即 _即  編撰數於詞典
           出木答棧 復 入木答棧
         編撰數於詞典
         (* 編撰 長度 於詞典 *)
         即 _即  編撰數於詞典
         Current-data-section
           出木答棧 復 入木答棧
         減 復
         編撰數於詞典
         (* 設置 八位組串頭 *)
         出木答棧
         單元大小
         減 存
         (* add a tailling 0 *)
         0 編撰八位組於數據段
         已矣
      再
      編撰八位組於數據段
      助,:"
      已矣
   者 動詞也

   ok
   夫 :"
      (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
      (* 編撰 ::
           八位組串[地址, 長度] *)
      (* 編撰 於 [data section] ::
           八位組串頭 和 以 0 結尾的 八位組串 *)
      單元大小 址 Current-data-section 加存 (* 爲 八位組串頭 *)
      Current-data-section 入木答棧 (* 爲 編撰於詞典 *)
      (* 棄一空格 *)
      八位組串之尾與首 棄
      助,:"
      已矣
   者 虛詞也

   ok
   #+end_src
** 八位組串爲很多短橫線乎
   #+begin_src cicada-language :tangle chinese-core.cicada
   夫 八位組串爲很多短橫線乎
      (* 八位組串[地址, 長度] -- 真 或 假 *)
      0 入木答棧 (* 計數 短橫線 之個數 *)
      助,八位組串爲很多短橫線乎
      已矣
   者 動詞也

   夫 助,八位組串爲很多短橫線乎
      (* 八位組串[地址, 長度] -- 真 或 假 *)
      (* 木答棧 ::
           計數器 -- *)
      復 零乎 則
         2 而棄 出木答棧
         6 >= 則 真
              否則 假
              再 已矣
      再 八位組串之尾與首
      字 -  =/= 則
         2 而棄
         出木答棧 棄
         假 已矣
      再
      出木答棧 1 加 入木答棧
      助,八位組串爲很多短橫線乎
      已矣
   者 動詞也
   #+end_src
** 八位組串
   #+begin_src cicada :tangle chinese-core.cicada
   (*
    ,* 其名爲 八位組串
    ,* 這在於 我提供簡單的 方式
    ,* 來 閱讀那些不能打印的 八位組
    ,*)

   夫 八位組串
      (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
      (* 編撰於詞典 ::
       ,*  | _即 | 地址 |
       ,*  | _即 | 長度 |
       ,*)
      (* 編撰於數據段 ::
       ,*  | 1 單元 | 八位組串頭 |
       ,*  | n 八位組 | 八位組串   |
       ,*  | 1 八位組 | 0        |
       ,*)
      (* 爲 八位組串 頭 留位置 *)
         單元大小 址 Current-data-section 加存
      (* 爲 複製到 數據段 *)
         助,八位組串,找回車
         躍 入木答棧
      助,八位組串
      已矣
   者 虛詞也
   ok

   夫 助,八位組串,找回車
      (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
      八位組串之尾與首
      10 (* 回車 *) == 則
         已矣
      再
      助,八位組串,找回車
      已矣
   者 動詞也

   夫 助,八位組串,反方向找回車之地址
      (* 地址 -- 地址 *)
      復 小取 10 (* 回車 *) == 則
         1 加
         已矣
      再
      1 減
      助,八位組串,反方向找回車之地址
      已矣
   者 動詞也

   夫 助,八位組串
      (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
      (* 木答棧 ::
          [複製八位組串之來源地址] --  *)
      (* 編撰於詞典 ::
       ,*  | _即 | 地址 |
       ,*  | _即 | 長度 |
       ,*)
      (* 編撰於數據段 ::
       ,*  | 1 單元 | 八位組串頭 |
       ,*  | n 八位組 | 八位組串   |
       ,*  | 1 八位組 | 0        |
       ,*)
      (* 找到結尾 然後 複製 *)
      詞串之尾與首
      2 而復 八位組串爲很多短橫線乎 則
        棄
        助,八位組串,反方向找回車之地址
        (* 複製於數據段 *)
        出木答棧 藏 減
        (* 源, 長度 *)
        Current-data-section 復 入木答棧
        換 復 入木答棧 (* 長度 *)
        複製八位組串
        (* 更新 Current-data-section *)
        出木答棧 復 入木答棧
        址 Current-data-section 加存
        (* 添加一個 0 作爲 結尾八位組 *)
        0 編撰八位組於數據段
        (* 設置八位組串頭 *)
        出木答棧
        出木答棧 復 入木答棧
        單元大小 減 存
        (* 編撰地址於詞典 *)
        即 _即 編撰數於詞典
           出木答棧 復 入木答棧
        編撰數於詞典
        (* 編撰長度於詞典 *)
        即 _即 編撰數於詞典
           出木答棧
           單元大小 減 取
        編撰數於詞典
        已矣
      再
      2 而棄
      助,八位組串
      已矣
   者 動詞也
   #+end_src
* *測試*
  #+begin_src cicada
  夫 ak
    八位組串
       kkk
    ---------
    八位組串
       aaa
    ---------
  者 也

  ak 寫八位組串 寫八位組串
  ok
  #+end_src
* ==================================================
* ok
  #+begin_src cicada :tangle chinese-core.cicada
  ok
  #+end_src
* ==================================================
