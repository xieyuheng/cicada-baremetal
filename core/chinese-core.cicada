(* Here 這個名詞 還是必須使用英文版本的 *)
夫 單元大小 Cell-width 者 也
夫 假 False 者 也
夫 真 True  者 也
夫 動詞詮釋者 Verb-explainer 者 也
夫 名詞詮釋者 Noun-explainer 者 也
夫 加       add      已矣 者 動詞也
夫 減       sub      已矣 者 動詞也
夫 乘       mul      已矣 者 動詞也
夫 除       div      已矣 者 動詞也
夫 模       mod      已矣 者 動詞也
夫 除模     divmod   已矣 者 動詞也
夫 模除     moddiv   已矣 者 動詞也
夫 負       negate   已矣 者 動詞也
夫 冪       power    已矣 者 動詞也
(* 一般的 存取 所作用於 的是 一單元 大小 的存儲空間
 * 小的 存取 所作用於 的是 一八位組 大小 的存儲空間
 *)

(* 多個值 而 存取 的作用 如下
 *   在存儲空間中 :
 *     ||  1 : 值-1  ||
 *     ||  1 : 值-2  ||
 *     ||  1 : 值-3  ||
 *     ...
 *   在棧中 :
 *     (* 值-1, 值-2, 值-3, ... *)
 * 即 從上到下 對應 從左到右
 * 這樣就和 名詞 的結構保持了一致
 * 此時 取 很簡單 但是 存 需要特殊處理
 *)

夫 存         save              已矣 者 動詞也
夫 小存       save-byte         已矣 者 動詞也
夫 而存       n-save            已矣 者 動詞也
夫 而小存     n-save-byte       已矣 者 動詞也


夫 取         fetch             已矣 者 動詞也
夫 小取       fetch-byte        已矣 者 動詞也
夫 而取       n-fetch           已矣 者 動詞也
夫 而小取     n-fetch-byte      已矣 者 動詞也


夫 加存       add-save          已矣 者 動詞也
夫 減存       sub-save          已矣 者 動詞也

夫 複製八位組串 copy-byte-string  已矣 者 動詞也
夫 做自引用值於參數棧
   make-self-reference-value,in-argument-stack
   已矣
者 動詞也

夫 取參數棧指針
   fetch-argument-stack-pointer
   已矣
者 動詞也

夫 重置參數棧指針
   reset-argument-stack-pointer
   已矣
者 動詞也
夫 棄     drop      已矣 者 動詞也
夫 而棄   n-drop    已矣 者 動詞也
夫 復     dup       已矣 者 動詞也
夫 而復   n-dup     已矣 者 動詞也
夫 躍       over       已矣 者 動詞也
夫 而躍     x-y-over   已矣 者 動詞也
夫 藏       tuck       已矣 者 動詞也
夫 而藏     x-y-tuck   已矣 者 動詞也
夫 換       swap       已矣 者 動詞也
夫 而換     x-y-swap   已矣 者 動詞也
(* 入棧時 棧的指針 向低地址移動 *)
夫 入木答棧
   (* 參數棧:: 值 --> 木答棧:: 值 *)
   單元大小 址 Lambda-stack-pointer 減存
   Lambda-stack-pointer 存
   已矣
者 動詞也

夫 出木答棧
   (* 木答棧:: 值 --> 參數棧:: 值 *)
   Lambda-stack-pointer 取
   單元大小 址 Lambda-stack-pointer 加存
   已矣
者 動詞也


夫 準備
   (* 參數棧:: a, b --> 木答棧:: a, b *)
   (* 注意 參數的順序 *)
   換 入木答棧 入木答棧
   已矣
者 動詞也

夫 召回
   (* 木答棧:: a, b --> 參數棧:: a, b *)
   (* 注意 參數的順序 *)
   出木答棧 出木答棧 換
   已矣
者 動詞也
夫 真乎       true?   已矣 者 動詞也
夫 假乎       false?  已矣 者 動詞也
夫 相等       ==       已矣 者 動詞也
夫 不等       =/=      已矣 者 動詞也

夫 小於       <        已矣 者 動詞也
夫 不大於     <=       已矣 者 動詞也

夫 大於       >        已矣 者 動詞也
夫 不小於     >=       已矣 者 動詞也

夫 零乎       zero?    已矣 者 動詞也
夫 一乎       one?     已矣 者 動詞也
(* 默認 位 指 二進制數的一位 *)
夫 位與    bitwise-and       已矣 者 動詞也
夫 位或    bitwise-or        已矣 者 動詞也
夫 位異或  bitwise-xor       已矣 者 動詞也
夫 位反    bitwise-invert    已矣 者 動詞也
夫 左移    shift-left        已矣 者 動詞也
夫 右移    shift-right       已矣 者 動詞也

夫 右移並保持符號
   shift-right-preserve-sign
   已矣
者 動詞也
夫 讀八位組 read-byte  已矣 者 動詞也
夫 寫八位組 write-byte 已矣 者 動詞也
夫 八位組串相等      equal-string?            已矣 者 動詞也
夫 八位組串之首      head-of-string           已矣 者 動詞也
夫 八位組串之尾      tail-of-string           已矣 者 動詞也
夫 八位組串之尾與首  tail-and-head-of-string  已矣 者 動詞也


夫 八位組串全爲空白乎
   (* 八位組串[地址, 長度] -- 真 或 假 *)
   復 零乎 則
      2 而棄 真 已矣
   再 八位組串之尾與首
   32 (* ASCII-space *)
   <= 則
      八位組串全爲空白乎 已矣
   再 2 而棄  假 已矣
者 動詞也

夫 寫八位組串
   (* 八位組串[地址, 長度] -- *)
   復 零乎 則
      2 而棄 已矣
   再
   1 減 換
   復 小取 寫八位組
   1 加 換
   寫八位組串
   已矣
者 動詞也
夫 首位編碼->編碼長度
   (* UTF-8 char -- length or 0 *)
   char-header->char-length
   已矣
者 動詞也
夫 緩衝區,字串之尾與首 0 者 也


(* >< 下面的函數沒有做錯誤處理 *)
夫 字串之尾與首
   (* 八位組串[地址, 長度] --
      八位組串[地址, 長度], UTF-8 字符 *)

   (* 清空 字之緩衝區 *)
   0 址 緩衝區,字串之尾與首 存

   躍 小取 首位編碼->編碼長度
   復 入木答棧
   1 2 而躍  址 緩衝區,字串之尾與首
   1 2 而換  複製八位組串

   緩衝區,字串之尾與首
   出木答棧 換 入木答棧
     藏 減
     2 1 而換  加
     換
   出木答棧
   已矣
者 動詞也
夫 緩衝區,寫字 0 者 也

夫 寫字
   (* UTF-8 字符 -- *)
   復 址 緩衝區,寫字 存
   首位編碼->編碼長度
   址 緩衝區,寫字
   換 寫八位組串
   已矣
者 動詞也
夫 八位組串代表整數乎
   (* 八位組串[地址, 長度] -- 真 或 假 *)
   string-denote-integer?
   已矣
者 動詞也
夫 八位組串->整數,與誤
   (* 八位組串[地址, 長度] -- 整數, 真 *)
   (* 或 *)
   (* 八位組串[地址, 長度] -- 0, 假 *)
   string->integer,with-error
   已矣
者 動詞也
夫 換行
   (* -- *)
   10 (* ASCII-space *)
   寫八位組
   已矣
者 動詞也

夫 回車
   (* -- *)
   10 (* ASCII-space *)
   寫八位組
   已矣
者 動詞也
夫 符號項之個數           Number-of-symbol-entrys    者 也
夫 符號項值域之大小       Symbol-value-bytes-size    者 也
夫 符號項八位組串域之大小   Symbol-string-bytes-size   者 也
夫 符號項長度域之大小     Symbol-length-bytes-size   者 也
夫 符號項之大小           Symbol-entry-bytes-size    者 也
夫 符號項八位組串域之最大值 Symbol-max-length          者 也

夫 首個符號項         First-symbol-entry         者 也
夫 末個符號項         Last-symbol-entry          者 也
(*
 * 符號項 :
 * | 值域     |
 * | 八位組串域 |
 * | 長度域   |
 *)

夫 索引->地址
   (* 索引 -- 地址 *)
   符號項之大小 乘
   首個符號項 加
   已矣
者 動詞也

夫 索引-逆散->八位組串
   (* 索引 -- 八位組串[地址, 長度] *)
   索引->地址 單元大小 加
   復  1 加  換
   小取
   已矣
者 動詞也


夫 助,八位組串-散->索引,求和
   (* 和 , 八位組串[地址, 長度] -- 和 *)
   復 零乎 則
      2 而棄  已矣
   再 八位組串之尾與首
   躍 左移
   1 3 而換  加  2 1 而換
   助,八位組串-散->索引,求和
   已矣
者 動詞也


夫 助,八位組串-散->索引,找舊或作新
   (* 八位組串[地址, 長度], 索引 -- 索引 *)
   2 1 而藏
   索引-逆散->八位組串
   (* 索引, 八位組串[地址, 長度], 八位組串-2[地址, 長度] *)
   復 零乎 則
      (* 作新 *)
      棄 躍 躍
      1 減  小存
      換
      複製八位組串
      已矣
   再
   (* 索引, 八位組串[地址, 長度], 八位組串-2[地址, 長度] *)
   2 2 而躍 八位組串相等 則 (* 找舊 *)
     2 而棄 已矣
   再
   1 2 而換  (* 以得 下一個 索引 *)
   (* 八位組串[地址, 長度], 索引 *)
   復 索引->地址 末個符號項 相等 則
      棄
      0
      助,八位組串-散->索引,找舊或作新
      已矣
   再
   1 加
   助,八位組串-散->索引,找舊或作新
   已矣
者 動詞也


夫 助,八位組串-散->索引,和->索引
   (* 和 -- 索引 *)
   符號項之個數 模
   已矣
者 動詞也


夫 八位組串-散->索引
   (* 八位組串[地址, 長度] -- 索引 *)
   2 而復
     復 符號項八位組串域之最大值 > 則
        棄 符號項八位組串域之最大值
        (*
         * 這意味着
         * 只有 前面的 符號項八位組串域之最大值 個八位組
         * 被 散列函數使用到了
         *)
     再  0  2 1 而換
     助,八位組串-散->索引,求和
     助,八位組串-散->索引,和->索引
   助,八位組串-散->索引,找舊或作新
   已矣
者 動詞也
夫 編撰數於數據段
   (* 數 -- *)
   (* 編撰 於 數據段 ::
        數 *)
   Current-data-section
   存
   Current-data-section
   單元大小 加
   址 Current-data-section 存
   已矣
者 動詞也

夫 編撰八位組於數據段
   (* 八位組 -- *)
   (* 編撰 於 數據段 ::
        數 *)
   Current-data-section
   小存
   1 址 Current-data-section 加存
   已矣
者 動詞也

(*
 * 注意
 * 八位組串在 內存中的樣子是:
 * | 1 單元 | 長度   |
 * | n 八位組 | 八位組串 |
 * | 1 八位組 | 0      |
 *)

夫 編撰八位組串於數據段
   (* 八位組串[地址, 長度] -- *)
   (* 編撰 於 數據段 ::
    * | 1 單元 | 長度   |
    * | n 八位組 | 八位組串 |
    * | 1 八位組 | 0      |
    *)
   復 入木答棧 (* 爲更新 Current-data-section *)
     復 編撰數於數據段
     Current-data-section
     換 複製八位組串
   (* 更新 Current-data-section *)
   出木答棧
   Current-data-section 加
   0 躍 小存
   1 加
   址 Current-data-section 存
   已矣
者 動詞也

夫 編撰純八位組串於數據段
   (* 八位組串[地址, 長度] -- *)
   (* 編撰 於 數據段 ::
    * | n 八位組 | 八位組串 |
    *)
   復 入木答棧 (* 爲更新 Current-data-section *)
     Current-data-section
     換 複製八位組串
   (* 更新 Current-data-section *)
   出木答棧
   址 Current-data-section 加存
   已矣
者 動詞也
夫 執行       execute     已矣 者 動詞也
夫 詞->大小
   (* 詞的鏈接[地址] -- 大小 *)
   單元大小 -2 乘 加 取
   已矣
者 動詞也

夫 詞->大小之地址
   (* 詞的鏈接[地址] -- 大小之地址 *)
   單元大小 -2 乘 加
   已矣
者 動詞也

夫 詞->標識
   (* 詞的鏈接[地址] -- 既是值又是地址 *)
   單元大小 -1 乘 加
   已矣
者 動詞也

夫 詞->類型
   (* 詞的鏈接[地址] -- 類型 *)
   單元大小 加 取
   已矣
者 動詞也

夫 詞->類型之地址
   (* 詞的鏈接[地址] -- 類型之地址 *)
   單元大小 加
   已矣
者 動詞也

夫 詞->名字
   (* 詞的鏈接[地址] -- 八位組串[地址, 長度] *)
   單元大小 2 乘 加
   取 復
   單元大小 加 (* 地址 *)
   換 取 (* 長度 *)
   已矣
者 動詞也

夫 詞->詮釋者
   (* 詞的鏈接[地址] -- 詮釋者[地址] *)
   單元大小 3 乘 加
   已矣
者 動詞也

夫 詞->定義
   (* 詞的鏈接[地址] -- 定義[地址] *)
   單元大小 4 乘 加
   已矣
者 動詞也
夫 查詞典
   (* 詞串[地址, 長度] -- 詞之鏈接[地址] 或 0 *)
   八位組串-散->索引
   索引->地址
   取
   已矣
者 動詞也
夫 八位組串代表虛詞乎
   (* 八位組串[地址, 長度] -- 真 或 假 *)
   查詞典
   復 0 == 則 已矣
   再 詞->類型
   2#111 位與  1 == 則
     真 已矣
   再 假 已矣
者 動詞也
夫 找詞界之地址,首
   (* [地址, 長度] -- 地址 或 -1 *)
   復 零乎 則
      2 而復
      -1
      已矣
   再
   八位組串之尾與首
   32 (* ASCII space *)
   大於 則
     棄 1 減
     已矣
   再
   找詞界之地址,首
   已矣
者 動詞也


(*
 * 下面的函數 對於 長度爲 0 的詞串的處理方式 與上面不同
 * 這使得對 尾 之尋找 總會成功
 * 所以 當 使用尋找到的結果 來做副作用時 要小心
 *)

夫 助,找詞界之地址,尾
   (* [地址, 長度] -- 地址 或 -1 *)
   復 零乎 則
      棄
      已矣
   再
   八位組串之尾與首
   32 (* ASCII space *)
   <= 則
      棄 1 減
      已矣
   再
   助,找詞界之地址,尾
   已矣
者 動詞也


夫 找詞界之地址,尾
   (* [地址, 長度] -- 地址 或 -1 *)
   (*
    * 對第一個做特殊處理 以保證 不在詞內部時 也能有效
    * 所以 要 使用 "助,找詞界之地址,尾" 這個幫助函數
    *)
   復 零乎 則
      棄
      已矣
   再
   八位組串之尾與首
   32 (* ASCII space *)
   <= 則
      (* 不在詞內部時 先進入詞的內部 *)
      2 而復  找詞界之地址,首
      復 -1 == 則
         3 而棄
         -1
         已矣
      再
      (* [地址, 長度], 首部詞界之地址 *)
      (* 利用所找到的地址 計算一個詞的內部的地址 *)
      2 1 而藏
      1 2 而換
      減 減
   再
   (*
    * 第一個非 空白的 八位組 已經被 棄了
    * 現在 要麼 已經在 詞之內了
    * 要麼 就已經在 尾部詞界 了
    *)
   助,找詞界之地址,尾
   已矣
者 動詞也


(* 索引起始於 0 *)

夫 找詞界之索引,首
   (* [地址, 長度] -- 索引 或 -1 *)
   躍 換
   找詞界之地址,首
   復 -1 == 則
      換 棄 (* 把 -1 留下 *)
      已矣
   再
   換 減
   已矣
者 動詞也

夫 找詞界之索引,尾
   (* [地址, 長度] -- 索引 或 -1 *)
   躍 換
   找詞界之地址,尾
   復 -1 == 則
      換 棄 (* 把 -1 留下 *)
      已矣
   再
   換 減
   已矣
者 動詞也
(* 下面的三個函數 不能作用於 全爲空白 的 八位組串
 * 在使用這些函數之前應該保證參數不是 全爲空白 的 八位組串
 *)

夫 詞串之首
   (* 詞串[地址, 長度] -- 名[地址, 長度] *)
   2 而復  找詞界之地址,首
   (* 先不做錯誤處理 而假設上面的函數能夠返回正確的地址 *)
   2 1 而換
   找詞界之地址,尾
   躍 減
   已矣
者 動詞也

夫 詞串之尾
   (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
   2 而復  找詞界之索引,尾
   (* 先不做錯誤處理 而假設上面的函數能夠返回正確的地址 *)
   藏 減
   2 1 而換
   加 換
   已矣
者 動詞也


夫 詞串之尾與首
   (* 詞串[地址, 長度] -- 詞串[地址, 長度], 名[地址, 長度] *)
   2 而復
   詞串之尾
   2 2 而換
   詞串之首
   已矣
者 動詞也
夫 編撰數於詞典
   (* 數 -- *)
   (* 編撰 :: 數 *)
   Here 存
   Here 單元大小 加
   址 Here 存
   已矣
者 動詞也


(*
 * 注意:
 * 八位組串在棧中是: [地址, 長度]
 * 而在內存中是:
 *   | 1 (單元) : 長度 |
 *   | n (八位組) : 八位組串 |
 *   | 1 (八位組) : 0 |
 *)

夫 編撰八位組串於詞典
   (* 八位組串[地址, 長度] -- *)
   復 入木答棧
      復 編撰數於詞典
      Here 換 複製八位組串
   (* 更新 Here 全局變量 *)
   出木答棧
   Here 加
   0 躍 小存
   1 加
   址 Here 存
   已矣
者 動詞也
夫 助,編撰詞之定義於詞典,數
   (* 八位組串[地址, 長度] -- *)
   (* >< 這裏 沒有就 string-to-integer,with-error 的返回值
    * 做錯誤處理 *)
   即 _即 編撰數於詞典
   八位組串->整數,與誤 棄
   編撰數於詞典
   已矣
者 動詞也

夫 助,編撰詞之定義於詞典,虛詞
   (* 詞串[地址, 長度], 八位組串[地址, 長度] -- 詞串[地址, 長度] *)
   (* >< 這裏 沒有就 "查詞典" 的返回值
    * 做錯誤處理 *)
   查詞典 詞->詮釋者 執行
   已矣
者 動詞也

夫 助,編撰詞之定義於詞典,詞
   (* 詞[地址] -- *)
   詞->詮釋者 編撰數於詞典
   已矣
者 動詞也


夫 編撰詞之定義於詞典
   (* 詞串[地址, 長度] -- *)
   2 而復  八位組串全爲空白乎 則
     2 而棄
     已矣
   再

   詞串之尾與首

   (* 下面這句是 找錯誤的時候用的 *)
   (* 2 而復 寫八位組串 換行 *)

   2 而復  八位組串代表整數乎 則
     助,編撰詞之定義於詞典,數
     編撰詞之定義於詞典 已矣
   再

   2 而復  八位組串代表虛詞乎 則
     助,編撰詞之定義於詞典,虛詞
     編撰詞之定義於詞典 已矣
   再

   2 而復  查詞典
   復 0 == 假乎 則
      2 1 而換  2 而棄
      助,編撰詞之定義於詞典,詞
      編撰詞之定義於詞典 已矣
   再

   (* 下面的錯誤處理是不好的 今後將予以改進 *)
   棄
   八位組串-散->索引
   添加符號於等待列表
   編撰詞之定義於詞典
   已矣
者 動詞也
夫 作詞頭
   (* 八位組串[地址, 長度] -- 詞[地址] *)
   Here 入木答棧 (* 爲了 名字頭的地址 *)
     編撰八位組串於詞典
     0    編撰數於詞典 (* 詞之大小 *)
     Here 編撰數於詞典 (* 詞之標識 *)
     Here (* 留下 詞之鏈接 作爲 返回值 *)
     0    編撰數於詞典 (* 詞之鏈接 *)
     0    編撰數於詞典 (* 詞之類型 *)
   出木答棧 編撰數於詞典 (* 詞之名字頭的地址 *)
   已矣
者 動詞也
夫 添加新詞入詞典
   (* 詞[地址] -- *)
   復

   (* 爲新的 符號散列表 *)
   復
   詞->名字 八位組串-散->索引 索引->地址
   存

   (* 爲舊的 單向連接的鏈表 *)
   (* 需要更新 First-word-in-dictionary 使它指向新加入詞典的詞 *)
   復 First-word-in-dictionary
   換 存 址 First-word-in-dictionary 存
   已矣
者 動詞也
(*
 * 下面的函數必須 在定義詞的函數的末尾被調用
 * 即 在 編撰詞之定義於詞典 之後
 * 因爲 它把 Here 作爲一個 隱含的參數
 *)

夫 設置詞之大小
   (* 詞[地址] -- *)
   復 詞->定義
   Here 換 減
   單元大小 除
   換 詞->大小之地址
   存
   已矣
者 動詞也
夫 添加符號於等待列表
   add-symbol-to-waiting-symbol-list
   已矣
者 動詞也

夫 消去符號於等待列表
   sub-symbol-from-waiting-symbol-list
   已矣
者 動詞也
(* 下面利用 兩個同名的函數來互相重新定義對方 *)

夫 函數也
   (* 詞串[地址, 長度] -- *)
   詞串之尾與首
   作詞頭
   復 入木答棧
      添加新詞入詞典
      動詞詮釋者 編撰數於詞典
      編撰詞之定義於詞典
   出木答棧
   復 設置詞之大小
   詞->名字 八位組串-散->索引
   消去符號於等待列表
   已矣
者 動詞也


夫 動詞也
   (* 詞串[地址, 長度] -- *)
   詞串之尾與首
   作詞頭
   復 入木答棧
      添加新詞入詞典
      動詞詮釋者 編撰數於詞典
      編撰詞之定義於詞典
   出木答棧
   復 設置詞之大小
   詞->名字 八位組串-散->索引
   消去符號於等待列表
   已矣
者 函數也
夫 虛詞也
   (* 詞串[地址, 長度] -- *)
   詞串之尾與首
   作詞頭
   復 入木答棧
      添加新詞入詞典
      動詞詮釋者 編撰數於詞典
      編撰詞之定義於詞典
   出木答棧
   復 設置詞之大小
   詞->類型之地址
   1 換 小存
   已矣
者 動詞也
(*
 * 用 UTF-8 編碼來處理漢字
 * 當 發現八位組串所包含的不是單一的 UTF-8 字時
 * 需要 特殊處理或報錯
 * 這裏 先不做這些處理 而只取第一個 UTF-8 字
 *)

(* 字者 於機器而言 即 字之編碼 *)
夫 八位組串->字
   (* 八位組串[地址, 長度] -- 字之編碼 *)
   字串之尾與首
   2 1 而換
   2 而棄
   已矣
者 動詞也


夫 字
   (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
   (* 編撰 ::
        _即[詮釋者之地址], 字之編碼 *)
   即 _即 編撰數於詞典
   詞串之尾與首
   八位組串->字 編撰數於詞典
   已矣
者 虛詞也
ok
夫 八位組串爲很多短橫線乎
   (* 八位組串[地址, 長度] -- 真 或 假 *)
   0 入木答棧 (* 計數 短橫線 之個數 *)
   助,八位組串爲很多短橫線乎
   已矣
者 動詞也

夫 助,八位組串爲很多短橫線乎
   (* 八位組串[地址, 長度] -- 真 或 假 *)
   (* 木答棧 ::
        計數器 -- *)
   復 零乎 則
      2 而棄 出木答棧
      6 >= 則 真
           否則 假
           再 已矣
   再 八位組串之尾與首
   字 -  =/= 則
      2 而棄
      出木答棧 棄
      假 已矣
   再
   出木答棧 1 加 入木答棧
   助,八位組串爲很多短橫線乎
   已矣
者 動詞也
(*
 * 其名爲 八位組串
 * 這在於 我提供簡單的 方式
 * 來 閱讀那些不能打印的 八位組
 *)

夫 八位組串
   (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
   (* 編撰於詞典 ::
    *  | _即 | 地址 |
    *  | _即 | 長度 |
    *)
   (* 編撰於數據段 ::
    *  | 1 單元 | 八位組串頭 |
    *  | n 八位組 | 八位組串   |
    *  | 1 八位組 | 0        |
    *)
   (* 爲 八位組串 頭 留位置 *)
      單元大小 址 Current-data-section 加存
   (* 爲 複製到 數據段 *)
      助,八位組串,找回車
      躍 入木答棧
   助,八位組串
   已矣
者 虛詞也
ok

夫 助,八位組串,找回車
   (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
   八位組串之尾與首
   10 (* 回車 *) == 則
      已矣
   再
   助,八位組串,找回車
   已矣
者 動詞也

夫 助,八位組串,反方向找回車之地址
   (* 地址 -- 地址 *)
   復 小取 10 (* 回車 *) == 則
      1 加
      已矣
   再
   1 減
   助,八位組串,反方向找回車之地址
   已矣
者 動詞也

夫 助,八位組串
   (* 詞串[地址, 長度] -- 詞串[地址, 長度] *)
   (* 木答棧 ::
       [複製八位組串之來源地址] --  *)
   (* 編撰於詞典 ::
    *  | _即 | 地址 |
    *  | _即 | 長度 |
    *)
   (* 編撰於數據段 ::
    *  | 1 單元 | 八位組串頭 |
    *  | n 八位組 | 八位組串   |
    *  | 1 八位組 | 0        |
    *)
   (* 找到結尾 然後 複製 *)
   詞串之尾與首
   2 而復 八位組串爲很多短橫線乎 則
     棄
     助,八位組串,反方向找回車之地址
     (* 複製於數據段 *)
     出木答棧 藏 減
     (* 源, 長度 *)
     Current-data-section 復 入木答棧
     換 復 入木答棧 (* 長度 *)
     複製八位組串
     (* 更新 Current-data-section *)
     出木答棧 復 入木答棧
     址 Current-data-section 加存
     (* 添加一個 0 作爲 結尾八位組 *)
     0 編撰八位組於數據段
     (* 設置八位組串頭 *)
     出木答棧
     出木答棧 復 入木答棧
     單元大小 減 存
     (* 編撰地址於詞典 *)
     即 _即 編撰數於詞典
        出木答棧 復 入木答棧
     編撰數於詞典
     (* 編撰長度於詞典 *)
     即 _即 編撰數於詞典
        出木答棧
        單元大小 減 取
     編撰數於詞典
     已矣
   再
   2 而棄
   助,八位組串
   已矣
者 動詞也
ok
